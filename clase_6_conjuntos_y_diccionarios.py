# -*- coding: utf-8 -*-
"""Clase 6 - Conjuntos y Diccionarios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oToscz8U3IxHmdxSrNei3eU5pwpR_sLL

# Set ( heterogeneos )
"""

lista = ['soy', 'una', 'lista', 2, True]
tupla = ('soy', 'una', 'tupla', 2, True)
conjunto = {'soy', 'un', 'conjunto', 1, True}

"""# Set vacio"""

# otros_datos = []
# otros_datos1 = ()
# otros_datos2 = {}
# otros_datos3 = set()
# print(type(otros_datos))
# print(type(otros_datos1))
# print(type(otros_datos2))
# print(type(otros_datos3))

"""# Asignacion en un set"""

lista = ['soy', 'una', 'lista', 2, True]
tupla = ('soy', 'una', 'tupla', 2, True)
conjunto = {'soy', 'un', 'conjunto', 1, True}

# lista[1] = 'uno'
# print(lista)
# tupla[1] = 'uno'
# print(tupla)
# conjunto[1] = 'uno'
# print(conjunto)

# print(lista[1])
# print(tupla[1])
# print(conjunto[1])
# print(conjunto)

"""# Objetos mutables y los sets"""

# prueba = {1, 2, 3, 'hola', 'como', 'estas'}
# otra_prueba1 = [(1,2,3), [6,7,8]]
# otra_prueba2 = ((1,2,3), [6,7,8])
# otra_prueba3 = {(1,2,3), [6,7,8]}
# print(otra_prueba1)
# print(otra_prueba2)
# print(otra_prueba3)

# otra_prueba1[1][2] = 5
# print(otra_prueba1)
# otra_prueba2[1][2] = 5
# print(otra_prueba2)
# otra_prueba2[1] = 5
# print(otra_prueba2)

"""# Set generado con iterables"""

# lista_prueba = [1, 2, 3, 'hola', 'como', 'estas', ['otra', 'lista']]
# lista_prueba = [1, 2, 3, 'hola', 'como', 'estas', ('otra', 'lista')]
# lista_prueba = [1, 2, 3, 'hola', 'como', 'estas']
# conjunto_prueba = set(lista_prueba)
# conjunto_prueba2 = set(range(10))
# print(conjunto_prueba)
# print(conjunto_prueba2)
# print(type(lista_prueba))
# print(type(conjunto_prueba))
# print(type(conjunto_prueba2))

"""# No se repiten valores"""

# lista = [1,2,3,4,5,6,6,6,6,1,2,3]
# conjunto = {1,2,3,4,5,6,6,6,6,1,2,3}
# print(lista)
# print(conjunto)
# print(set(lista))

# print(tuple(set(lista)))

"""============================================================
============================================================
# Funciones Integradas
============================================================
============================================================
"""

# auto = {'v8', 'Negro', (6, 'blindadas')}
# print(auto)
# print(auto)
# print(auto)
# print(auto)
# print(auto)
# print(auto)
# print(auto)
# print(auto)
# print(auto)
# print(auto)

"""# Método add"""

# lista = [1, 2, 3, 'probando']
# tupla = (1, 2, 3, 'probando')
# auto.add('descapotable')
# auto.add(lista)
# auto.add(tupla)
# print(auto)

"""# Método update"""

# lista = ['soy', 'una', 'lista']
# tupla = ('soy', 'una', 'tupla')
# cadena = 'soy una cadena'
# rango = range(15)
# auto.update(lista)
# print(auto)
# auto.update(tupla)
# print(auto)
# auto.add(cadena)
# print(auto)
# auto.update(cadena)
# print(auto)
# auto.update(rango)
# print(auto)

"""# Función len"""

# auto = {'v8', 'Negro', (6, 'blindadas')}
# print(len(auto))

"""# Método discard"""

# auto = {'v8', 'Negro', (6, 'blindadas')}
# auto.discard('lista')
# print(auto)
# auto.add('lista')
# print(auto)
# auto.discard('lista')
# print(auto)

"""# Método remove ( discard pero con generacion de error )"""

# auto = {'v8', 'Negro', (6, 'blindadas')}
# auto.remove('tupla')
# print(auto)
# auto.add('tupla')
# print(auto)
# auto.remove('tupla')
# print(auto)

"""# Operador in"""

# auto = {'v8', 'Negro', (6, 'blindadas')}
# # for dato in auto:
# #     print(dato)
# print('descapotable' in auto)
# print('caño de escape' not in auto)
# lista = [1,2,3,4]
# print(1 in lista)

"""# Método clear"""

# auto = {'v8', 'Negro', (6, 'blindadas')}
# print(auto)
# # auto = 'soy un texto'
# # auto = set()
# auto.clear()
# print(auto)

"""# Método pop"""

# auto = {'v8', 'Negro', (6, 'blindadas')}
# print(auto)
# valor = auto.pop()
# print(auto)
# print(valor)

# while len(auto): 
#     print(auto)
#     valor = auto.pop()
#     print(valor)

"""# Ej 1 Sets
Crear un conjunto en Python que posea los siguientes elementos: 

Colores: Rojo, Blanco, Azul.

Posteriormente, agrega a nuestro set de colores, los valores de: Violeta y Dorado

Elimina a los colores: Celeste, Blanco y Dorado

Pregunta: ¿Qué pasa si queremos eliminar el color Celeste utilizando el método discard?
"""

# colores = {'Rojo', 'Blanco', 'Azul'}

# #v1
# colores.add('Violeta')
# colores.add('Dorado')

# # v2
# colores.update({'Violeta', 'Dorado'})

# colores.discard('Celeste')
# colores.remove('Blanco')
# colores.remove('Dorado')

# print(colores)


"""# Ej 2 Sets (10min)
Programa las siguientes instrucciones de forma ordenada sobre la variable grupo:
1. Añade los usuarios: Ana, Ramón, Marta, Eric, David
2. Elimina los usuarios: Mario, Miguel, Esteban

grupo = {'Miguel', 'Blanca', 'Mario', 'Andrés'}
"""



"""# BREAK

# Diccionarios
"""

# dicc = {}

"""Las claves/llaves/keys pueden ser cualquier valor inmutable

los valores/values pueden ser cualquier valor posible


```

dicc = { clave: valor, clave2: valor2, clave3: valor3, ...}

dicc1 = {
    clave: valor,
    clave2: valor2,
    clave3: valor3,
    ...
}

dicc2 = {
    clave: dicc1,
    clave2: valor2,
    clave3: valor3,
    ...
}

dicc3 = {
    0: ['soy', 'una', 'lista'],
    'tupla': ('soy', 'una', 'tupla'),
    ('tupla', 'llave'): 'la tupla es mi llave'
}
```
"""

# auto = {'v8', 'Negro', (6, 'blindados')}
# print(auto)
# motor = 'v8'
# color = 'Negro'

# auto = {
#     'motor': 'v8', 
#     'color': 'Negro',
#     'vidrios': (6, 'blindados'),
#     'pasajeros': 4,
# }
# print(auto)

"""
# Acceso, mutabilidad, asignación, agregado de valores"""

# lista = ['soy', 'una', 'lista']
# print(lista[1])
# lista[1] = 24
# print(lista[1])
# auto = {
#     'motor': 'v8', 
#     'color': 'Negro',
#     'vidrios': (6, 'blindadas'),
#     'pasajeros': 4,
# }
# print(auto['motor'][1])
# print(auto['canio de escape'])
# print(auto.get('motor'))
# print(auto.get('canio de escape'))
# auto['motor'] = 'v12'
# print(auto['motor'])
# print(auto)
# auto['modelo'] = 2016
# print(auto)
# auto['pasajeros'] += 1
# print(auto)

"""============================================================
============================================================
# Funciones Diccionarios
============================================================
============================================================

# Método update
"""

auto = {
    'motor': 'v8', 
    'color': 'Negro',
    'vidrios': (6, 'blindadas'),
    'pasajeros': 4,
}
pepe = (1, 2)
# auto.update({pepe: 'valor1', 'llave2': 'valor2', 'motor': 'v12'})
# print(auto)
# print(auto[(1,2)])
# auto.update((('llave1', 'valor1'), ('llave2', 'valor2'), ('motor', 'v12')))
# print(auto)

"""
# Función len"""

# auto = {
#     'motor': 'v8', 
#     'color': 'Negro',
#     'vidrios': (6, 'blindadas'),
#     'pasajeros': 4,
# }
# print(len(auto))

"""
# Función del"""

# auto = {
#     'motor': 'v8', 
#     'color': 'Negro',
#     'vidrios': (6, 'blindadas'),
#     'pasajeros': 4,
# }
# del auto['color']
# del auto['ricardo']
# print(auto)

"""
# Operador in"""

# auto = {
#     'motor': 'v8', 
#     'color': 'Negro',
#     'vidrios': (6, 'blindadas'),
#     'pasajeros': 4,
# }
# print('motor' in auto)
# print('v8' in auto)
# print('v8' not in auto)

"""
# Método clear"""

# auto = {
#     'motor': 'v8', 
#     'color': 'Negro',
#     'vidrios': (6, 'blindadas'),
#     'pasajeros': 4,
# }
# auto.clear()
# # auto = {}
# print(auto)

"""
# Método pop"""

auto = {
    'motor': 'v8', 
    'color': 'Negro',
    'vidrios': (6, 'blindadas'),
    'pasajeros': 4,
}

# print(auto)
# valor = auto.pop()
# print(auto)
# print(valor)


# print(auto)
# valor = auto.pop('motor')
# print(auto)
# print(valor)


# print(auto)
# valor = auto.pop('ricardo')
# print(auto)
# print(valor)


# print(auto)
# valor = auto.pop(input('Que llave queres sacar?'), 'este valor sale por defecto si no se encuentra la llave buscada')
# print(auto)
# print(valor)



# valor = auto.pop('ricardo', input('dame un dato'))
# valor = auto.pop('color', 'la llave color no se encontro')
# valor = auto.pop(input('dame la key...?'), [1,2,3,45])
# print(auto)
# print(valor)

"""# Ej 1 Dicts
Deberás crear un diccionario que almacene a los ganadores 
de la Copa Mundial de la FIFA desde el año 1990 al 2022. 
Y mostrarlo por pantalla.

Datos para la resolución:
1990: 'Alemania', 
1994: 'Brasil', 
1998: 'Francia',
2002: 'Brasil',
2006: 'Italia',
2010: 'España',
2014: 'Alemania'
2018: 'Francia'
2022: 'Argentina'
"""

# dicc = {
#     1990: 'Alemania', 
#     1994: 'Brasil', 
#     1998: 'Francia',
#     2002: 'Brasil',
#     2006: 'Italia',
#     2010: 'España',
#     2014: 'Alemania',
#     2018: 'Francia',
#     2022: 'Argentina'
# }
# print(dicc)


"""# Ej 2 Dicts
Programa las siguientes instrucciones de forma ordenada sobre la variable animales:
1. Inicialmente el diccionario es: animales = {"elefante": ""}
2. Añade al diccionario las claves perro, tigre y mono con sus respectivos valores “Bobby”, “Pepe” y “Homero”
3. Modificá las claves elefante y delfin con los valores “Trompis” y “Manolo” respectivamente
"""

# animales = {"elefante": ""}

# # v1
# animales.update({"perro": "Bobby", "tigre": "Pepe", "mono": "Homero"})

# # v2
# # animales.update((("perro", "Bobby"), ("tigre", "Pepe"), ("mono", "Homero")))

# animales.update({"elefante": "Trompis", "delfin": "Manolo"})

# print(animales)

""" 
Escribir un programa que almacene el diccionario con los créditos 
de las asignaturas de un curso {'Matemáticas': 6, 'Física': 4, 'Química': 5} 
y después muestre por pantalla los créditos de cada asignatura en el formato 
<asignatura> tiene <créditos> créditos, donde <asignatura> es cada una de las 
asignaturas del curso, y <créditos> son sus créditos. Al final debe mostrar también 
el número total de créditos del curso.
"""

creditos = {'Matemáticas': 6, 'Física': 4, 'Química': 5}

# print(f"Matemáticas tiene {creditos['Matemáticas']} créditos.")
# print(f"Física tiene {creditos['Física']} créditos.")
# print(f"Química tiene {creditos['Química']} créditos.")
# print('Los creditos totales del curso son', creditos['Matemáticas'] + creditos['Física'] + creditos['Química'])

total_creditos = 0
for llave in creditos:
    print(f"{llave} tiene {creditos[llave]} créditos.")
    total_creditos += creditos[llave]
    
print('Los creditos totales del curso son', total_creditos)


















# creditos = {'Matemáticas': 6, 'Física': 4, 'Química': 5}
# creditos_totales = 0 

# for clave in creditos:
#     print(f'{clave} tiene {creditos[clave]} creditos.')
    
#     # v1
#     creditos_totales += creditos[clave]
#     # v2
#     # creditos_totales = creditos_totales + creditos[clave]
    
# print(f'El curso tiene en total {creditos_totales} creditos')
